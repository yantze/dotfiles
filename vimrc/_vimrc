" author: yantze
" $VIM/_vimrc.bundles " the package location

" ‰∏ãÈù¢ÁöÑ‰∏§Ë°åÔºåÈÖçÁΩÆÂü∫Êú¨‰øùÊåÅ‰∏çÂèò,‰∏ÄËà¨‰∏çÈúÄË¶Å‰øÆÊîπ,ÊâÄ‰ª•ÊäòÂè†,ÂèØ‰ª•Áî®zaÊâìÂºÄ
" two lines below folded because of not often changing
" Environment {{{

    " Identify platform {
        silent function! OSX()
            if system('uname')=~'Darwin'
                let g:test = ''
            else
                let g:test = ''
            return has('macunix')
        endfunction
        silent function! LINUX()
            return has('unix') && !has('macunix') && !has('win32unix')
        endfunction
        silent function! WINDOWS()
            return  (has('win16') || has('win32') || has('win64'))
        endfunction
    " }

    " Windows Compatible {
        if WINDOWS()
            let g:isWIN = 1
            " set runtimepath=$HOME.'\.vim',$VIM.'\vimfiles',$VIMRUNTIME
            if has("statusline")
                set statusline  =%<%f\ %h%m%r%=%{(&fenc==\"\"?&enc:&fenc).((exists(\"+bomb\")\ &&\ &bomb)?\",B\":\"\")}
                set statusline +=%{\"[\".&ff.\"]\"} "file format
                set statusline +=%k
                set statusline +=\ %h%m%r%=%-14.(%l,%c%V%)\ %P
            endif
        else
            let g:isWIN = 0
            " ÂÖºÂÆπwindowsÁöÑÁéØÂ¢ÉÂèòÈáè$VIM
            let $VIM = $HOME."/.vim"
            " Ê≤°ÊúâÊïàÊûúÔºåÂæÖÂÆö
            set shell=/bin/sh
        endif
    " }

    " Adapter {
        " Adapte with putty because of putty only support the 7 character
        if $TERM == 'screen'
            "from: http://vim.wikia.com/wiki/Get_Alt_key_to_work_in_terminal
            set <m-j>=j
            set <m-h>=h
            set <m-k>=k
            set <m-l>=l
            "from: https://groups.google.com/forum/#!topic/vim_use/uKOmY-mHo_k
            " ÂØºËá¥ ESC Âª∂ËøüÂèçÂ∫î
            "below set <esc> wait the next key millionstime
            set timeout timeoutlen=3000 ttimeoutlen=100
        endif
        " the ^[ is an Esc char that comes before the 'a'
        " In most default configs, ^[a may be typed by pressing first <C-v>, then <M-a>

        " http://vim.1045645.n5.nabble.com/Mapping-meta-key-within-tmux-td5716437.html
        " Fix screen's key bindings.
        " if &term == "screen"
        "     " These work from my HP keyboard in PuTTY on Windows XP.
        "     map <Esc>[D   <S-Left>
        "     map <Esc>[C   <S-Right>
        "     map <Esc>[11~ <F1>
        "     map <Esc>[12~ <F2>
        "     map <Esc>[13~ <F3>
        "     map <Esc>[14~ <F4>
        "     map <Esc>[15~ <F5>
        "     map <Esc>[16~ <F6>
        "     map <Esc>[17~ <F7>
        "     map <Esc>[18~ <F8>
        "     map <Esc>[19~ <F9>
        "     map <Esc>[21~ <F10
        "     map <Esc>[23~ <F11>
        "     map <Esc>[24~ <F12>
        " endif

        " if &term=="xterm"
        "     set t_Co=8
        "     set t_Sb=[4%dm
        "     set t_Sf=[3%dm
        " endif
    " }

    " Package manager{
        " Ê∑ªÂä†vundleÊèí‰ª∂ÁÆ°ÁêÜÂô®
        set nocompatible               " ËÆæÁΩÆ‰∏ç‰∏é‰πãÂâçÁâàÊú¨ÂÖºÂÆπ be iMproved
        filetype off                   " Ê£ÄÊµãÊñá‰ª∂Á±ªÂûã required!
        " set vimrc_no_plugin=1 to do not add-on plugin
        " let g:vimrc_no_plugin=1
        if !exists("g:vimrc_no_plugin")
            " if filereadable(expand("$VIM/_vimrc.bundles"))
                if filereadable(expand("$VIM/bundle/Vundle.vim/README.md"))
                    set rtp+=$VIM/bundle/Vundle.vim  "Ê∑ªÂä†vendleÁéØÂ¢ÉÂèòÈáè
                    source $VIM/_vimrc.bundles
                endif
            " endif
        endif
        " you can put it in tmpfs:/dev/shm/.dotfiles/vimrc/vimfiles/bundle/Vundle.vim
        " ÂÆâË£ÖÊñ∞ÁöÑÊèí‰ª∂ :PluginInstall
        " Âú®ÂëΩ‰ª§Ë°åËøêË°å vim +PluginInstall +qall
        " Êõ¥Êñ∞Êèí‰ª∂:PluginUpdate
        " Ê∏ÖÈô§‰∏çÂÜç‰ΩøÁî®ÁöÑÊèí‰ª∂:PluginClean,
        " ÂàóÂá∫ÊâÄÊúâÊèí‰ª∂:PluginList
        " Êü•ÊâæÊèí‰ª∂:PluginSearch

    " }

    " Basic {
        "set powerline
        "set guifont=Powerline
        " Uncomment the following to have Vim jump to the last position when reopening a file
        au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

        " set vimrc
        let $VIMRC=$MYVIMRC

        if has('clipboard')
            if has('unnamedplus')  " When possible use + register for copy-paste
                set clipboard=unnamed,unnamedplus
            else  
                " On mac and Windows, use * register for copy-paste
                " windows/mac Á≤òË¥¥Êùø‰∏ÄËµ∑Áî®Ôºå‰∏çÊñπ‰æø
                set clipboard=unnamed
            endif
        endif

    " }

    " Âà§Êñ≠ÊòØÂê¶Â§Ñ‰∫éGUIÁïåÈù¢
    if has("gui_running")
        let g:isGUI = 1
    else
        let g:isGUI = 0
    endif

" }}}

" Functions {{{

" there func is for internal function invoal
" not relate the other plugin

func! RemoveTabs()
    if &shiftwidth == 2
        exec "%s/	/  /g"
    elseif &shiftwidth == 4
        exec "%s/	/    /g"
    elseif &shiftwidth == 6
        exec "%s/	/      /g"
    elseif &shiftwidth == 8
        exec "%s/	/        /g"
    else
        exec "%s/	/ /g"
    end
endfunc

" Diff current unsaved file
function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction

" Clean close
function! CleanClose(tosave,bang)
    if a:bang == 1
        let bng = "!"
    else
        let bng = ""
    endif
    if (a:tosave == 1)
        w!
    endif
    let todelbufNr = bufnr("%")
    let newbufNr = bufnr("#")
    if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
        exe "b".newbufNr
    else
        exe "bnext".bng
    endif

    if (bufnr("%") == todelbufNr)
        new
    endif
    exe "bd".bng.todelbufNr
endfunction

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX files.
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction

" Mydict, use *dict* in vim {
function! Mydict()
    let expl=system('dict ' . expand("<cword>"))
    windo if expand("%")=="dict.tmp" | q! | endif
    " botright vertical 33split dict.tmp
    botright 12split dict.tmp
    " botright cwindow
    setlocal buftype=nofile bufhidden=hide noswapfile
    set report=2 " ignore the following 'one line' substitution
    set nonu
    1s/^/\=expl/
    1
    set report=0 " recovery the 'report' setting
endfunction
" Mydict }

" ÁºñËØëÂπ∂ËøêË°å
func! Compile_Run_Code()
    exec "w"
    if &filetype == "c"
        if g:isWIN
            exec !gcc -Wall -std=c11 -o %:r %:t && %:r.exe"
        else
            exec "!clang -Wall -std=c11 -o %:r %:t && ./%:r"
            " exec "!gcc -Wall -o %:r %:t && ./%:r"
        endif
    elseif &filetype == "cpp"
        if g:isWIN
            exec "!g++ -Wall -std=c++11 -o %:r %:t && %:r.exe"
        else
            " exec "!g++ -Wall -std=c++11 -o %:r %:t && ./%:r"
            exec "!clang++ -Wall -std=c++11 -o %:r %:t && ./%:r"
        endif
    elseif &filetype == "d"
        if g:isWIN
            exec "!dmd -wi %:t && %:r.exe"
        else
            exec "!dmd -wi %:t && ./%:r"
        endif
    elseif &filetype == "go"
        exec "!go run %:t"
    elseif &filetype == "rust"
        if g:isWIN
            exec "!rustc %:t && %:r.exe"
        else
            exec "!rustc %:t && ./%:r"
        endif
    elseif &filetype == "java"
        exec "!javac %:t && java %:r"
    elseif &filetype == "groovy"
        exec "!groovy %:t"
    elseif &filetype == "scala"
        exec "!scala %:t"
    elseif &filetype == "clojure"
        exec "!clojure -i %:t"
    elseif &filetype == "cs"
            exec "!mcs %:t && mono %:r.exe"
    elseif &filetype == "fsharp"
        if g:isWIN
            exec "!fsc %:t && %:r.exe"
        else
            exec "!fsharpc %:t && ./%:r.exe"
        endif
    elseif &filetype == "scheme" || &filetype == "racket"
        exec "!racket -fi %:t"
    elseif &filetype == "lisp"
        exec "!sbcl --load %:t"
    elseif &filetype == "ocaml"
        if g:isWIN
            exec "!ocamlc -o %:r.exe %:t && %:r.exe"
        else
            exec "!ocamlc -o %:r %:t && ./%:r"
        endif
    elseif &filetype == "haskell"
        if g:isWIN
            exec "!ghc -o %:r %:t && %:r.exe"
        else
            exec "!ghc -o %:r %:t && ./%:r"
        endif
    elseif &filetype == "lua"
        exec "!lua %:t"
    elseif &filetype == "perl"
        exec "!perl %:t"
    elseif &filetype == "php"
        exec "!php %:t"
    elseif &filetype == "python"
        exec "!python %:t"
    elseif &filetype == "ruby"
        exec "!ruby %:t"
    elseif &filetype == "elixir"
        exec "!elixir %:t"
    elseif &filetype == "julia"
        exec "!julia %:t"
    elseif &filetype == "dart"
        exec "!dart %:t"
    elseif &filetype == "haxe"
        exec "!haxe -main %:r --interp"
    elseif &filetype == "r"
        exec "!Rscript %:t"
    elseif &filetype == "coffee"
        exec "!coffee -c %:t && node %:r.js"
    elseif &filetype == "ls"
        exec "!lsc -c %:t && node %:r.js"
    elseif &filetype == "typescript"
        exec "!tsc %:t && node %:r.js"
    elseif &filetype == "javascript"
        exec "!node %:t"
    elseif &filetype == "sh"
        exec "!bash %:t"
    endif
endfunc

" ÁîüÊàêcscopeÂíåtagsÊñá‰ª∂
function! Do_CsTag()
    let dir = getcwd()
    if filereadable("tags")
        if(g:iswindows==1)
            let tagsdeleted=delete(dir."\\"."tags")
        else
            let tagsdeleted=delete("./"."tags")
        endif
        if(tagsdeleted!=0)
            echohl WarningMsg | echo "Fail to do tags! I cannot delete the tags" | echohl None
            return
        endif
    endif
    if has("cscope")
        silent! execute "cs kill -1"
    endif
    if filereadable("cscope.files")
        if(g:iswindows==1)
            let csfilesdeleted=delete(dir."\\"."cscope.files")
        else
            let csfilesdeleted=delete("./"."cscope.files")
        endif
        if(csfilesdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.files" | echohl None
            return
        endif
    endif
    if filereadable("cscope.out")
        if(g:iswindows==1)
            let csoutdeleted=delete(dir."\\"."cscope.out")
        else
            let csoutdeleted=delete("./"."cscope.out")
        endif
        if(csoutdeleted!=0)
            echohl WarningMsg | echo "Fail to do cscope! I cannot delete the cscope.out" | echohl None
            return
        endif
    endif
    if(executable('ctags'))
        "silent! execute "!ctags -R --c-types=+p --fields=+S *"
        silent! execute "!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q ."
    endif
    if(executable('cscope') && has("cscope") )
        if(g:iswindows!=1)
            silent! execute "!find . -name '*.h' -o -name '*.c' -o -name '*.cpp' -o -name '*.java' -o -name '*.cs' > cscope.files"
        else
            silent! execute "!dir /s/b *.c,*.cpp,*.h,*.java,*.cs >> cscope.files"
        endif
        silent! execute "!cscope -b"
        execute "normal :"
        if filereadable("cscope.out")
            execute "cs add cscope.out"
        endif
    endif
endfunction

" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d %set :",
                \ &tabstop, &shiftwidth, &textwidth, &expandtab ? '' : 'no')
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
endfunction
" }}}

" Setting {{{

" Theme {{{
" ËÆæÁΩÆÁùÄËâ≤Ê®°ÂºèÂíåÂ≠ó‰Ωì
if g:isWIN
    " ‰ΩøÁî®GUIÁïåÈù¢Êó∂ÁöÑËÆæÁΩÆ
    if g:isGUI
        " ÂêØÂä®gvimÊó∂Á™óÂè£ÁöÑÂ§ßÂ∞è
        " set lines=42 columns=170
        " ÂêØÂä®Êó∂Ëá™Âä®ÊúÄÂ§ßÂåñÁ™óÂè£
        " au GUIEnter * simalt ~x

        " winpos 20 20             " ÊåáÂÆöÁ™óÂè£Âá∫Áé∞ÁöÑ‰ΩçÁΩÆÔºåÂùêÊ†áÂéüÁÇπÂú®Â±èÂπïÂ∑¶‰∏äËßí
        " set lines=20 columns=90  " ÊåáÂÆöÁ™óÂè£Â§ßÂ∞èÔºålines‰∏∫È´òÂ∫¶Ôºåcolumns‰∏∫ÂÆΩÂ∫¶
        set guioptions+=c        " ‰ΩøÁî®Â≠óÁ¨¶ÊèêÁ§∫Ê°Ü
        set guioptions-=m        " ÈöêËóèËèúÂçïÊ†è
        set guioptions-=T        " ÈöêËóèÂ∑•ÂÖ∑Ê†è
        set guioptions-=L        " ÈöêËóèÂ∑¶‰æßÊªöÂä®Êù°
        set guioptions-=r        " ÈöêËóèÂè≥‰æßÊªöÂä®Êù°
        " set guioptions-=b        " ÈöêËóèÂ∫ïÈÉ®ÊªöÂä®Êù°
        " set showtabline=1        " ÈöêËóèTabÊ†è
        set guioptions+=aA       " get some autoselect interaction with the system clipboard

        " colortheme list: molokai autumn blackboard asu1dark busybee tomorrow
        " colorscheme solarized  " deep blue
        " colorscheme morning    " white

        " let g:zenburn_transparent = 1 " black
        let g:zenburn_high_Contrast = 1
        colorscheme zenburn      " grey, my fav
        " colorscheme desertEx

        " set font
        set guifont=Consolas:h12
        " set guifont=Monaco:h11
        " set guifont=Source\ Code\ Pro\ Regular:h15
        " set guifont=YaHei\ Consolas\ Hybrid:h13
        " set guifont=Source\ Code\ Pro:h13

    else
        colorscheme ir_black
        " ÂÖºÂÆπwindows‰∏ãcmdÁöÑgb2312
        " set enc=cp936
        " help encoding-table
        set termencoding=cp936
        " In order to reload a file with proper encoding you can do:
        " :e! ++enc=<the_encoding>.
        " dosÈáåÈù¢<backspace>Âíå<c-h>ÂÆåÂÖ®ÈìæÊé•‰∫ÜÔºåË¶ÅÂèñÊ∂à<c-h>ÁöÑÊò†Â∞Ñ
        iunmap <c-h>


    endif
else
    if g:isGUI
        set guifont=Monaco\ 11
        " set guifont=YaHei\ Consolas\ Hybrid:h13
        set background=light
        colorscheme solarized
        set lines=38 columns=140

    else
        " set background=light
        " g:solarized_termcolors= 16 | 256
        " g:solarized_termtrans = 0 | 1
        " g:solarized_degrade = 0 | 1
        " g:solarized_bold = 1 | 0 
        " g:solarized_underline = 1 | 0 
        " g:solarized_italic = 1 | 0 
        " g:solarized_contrast = ‚Äúnormal‚Äù| ‚Äúhigh‚Äù or ‚Äúlow‚Äù 
        " g:solarized_visibility= ‚Äúnormal‚Äù| ‚Äúhigh‚Äù or ‚Äúlow‚Äù

        " colortheme list: ir_black grb256 BusyBee pt_black solarized
        colorscheme pt_black
    endif
endif
" }}}

" Base Setting {{{

syntax enable                " ÊâìÂºÄËØ≠Ê≥ïÈ´ò‰∫Æ
syntax on                    " ÂºÄÂêØÊñá‰ª∂Á±ªÂûã‰æ¶Êµã
filetype indent on           " ÈíàÂØπ‰∏çÂêåÁöÑÊñá‰ª∂Á±ªÂûãÈááÁî®‰∏çÂêåÁöÑÁº©ËøõÊ†ºÂºè
filetype plugin on           " ÈíàÂØπ‰∏çÂêåÁöÑÊñá‰ª∂Á±ªÂûãÂä†ËΩΩÂØπÂ∫îÁöÑÊèí‰ª∂
filetype plugin indent on    " ÂêØÁî®Ëá™Âä®Ë°•ÂÖ®
set ic                       " ÂøΩÁï•Â§ßÂ∞èÂÜôÊü•Êâæ
set visualbell t_vb=         " ÂÖ≥Èó≠visual bell/Â£∞Èü≥
au GuiEnter * set t_vb=      " ÂÖ≥Èó≠beep/Â±èÈó™

" Êñá‰ª∂ÈÖçÁΩÆ
" set fileformats=unix                             " ËÆæÂÆöÊç¢Ë°åÁ¨¶
set bsdir=buffer                                 " ËÆæÂÆöÊñá‰ª∂ÊµèËßàÂô®ÁõÆÂΩï‰∏∫ÂΩìÂâçÁõÆÂΩï
set enc=utf-8                                    " ËÆæÁΩÆÁºñÁ†Å
set fenc=utf-8                                   " ËÆæÁΩÆÊñá‰ª∂ÁºñÁ†Å
set fencs=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936 " ËÆæÁΩÆÊñá‰ª∂ÁºñÁ†ÅÊ£ÄÊµãÁ±ªÂûãÂèäÊîØÊåÅÊ†ºÂºè
set shortmess+=filmnrxoOtT                       " Abbrev. of messages (avoids 'hit enter')
set viewoptions=folds,options,cursor,unix,slash  " Better Unix / Windows compatibility
" set virtualedit=onemore                          " Allow for cursor beyond last character
" set bsdir=buffer                               " ËÆæÂÆöÊñá‰ª∂ÊµèËßàÂô®ÁõÆÂΩï‰∏∫ÂΩìÂâçÁõÆÂΩï,default value
" set autochdir

" ÊääËøô‰∏™Âø´Êç∑ÈîÆÊîæÂú®ËøôÈáå‰∏ªË¶ÅÊòØÂõ†‰∏∫dosÁöÑvimÂØπËøô‰∏™‰∏çÊîØÊåÅÔºåÂÖ∂ÂÆÉÁöÑÁ≥ªÁªüÊîØÊåÅ
imap <c-h> <ESC>I


" Âü∫Êú¨ËÆæÁΩÆ
" set my leader
let mapleader=","
" map : to ;
map ; :

set backspace=2              " ËÆæÁΩÆÈÄÄÊ†ºÈîÆÂèØÁî®
set autoindent               " Ëá™Âä®ÂØπÈΩê
set smartindent              " Êô∫ËÉΩËá™Âä®Áº©Ëøõ
set nu!                      " ÊòæÁ§∫Ë°åÂè∑
set ruler                    " Âè≥‰∏ãËßíÊòæÁ§∫ÂÖâÊ†á‰ΩçÁΩÆÁöÑÁä∂ÊÄÅË°å
set hidden                   " ÂÖÅËÆ∏Âú®ÊúâÊú™‰øùÂ≠òÁöÑ‰øÆÊîπÊó∂ÂàáÊç¢ÁºìÂÜ≤Âå∫
set laststatus=2             " ÂºÄÂêØÁä∂ÊÄÅÊ†è‰ø°ÊÅØ
set cmdheight=2              " ÂëΩ‰ª§Ë°åÁöÑÈ´òÂ∫¶ÔºåÈªòËÆ§‰∏∫1ÔºåËøôÈáåËÆæ‰∏∫2
set writebackup              " ËÆæÁΩÆÊó†Â§á‰ªΩÊñá‰ª∂
set autoread                 " ÂΩìÊñá‰ª∂Âú®Â§ñÈÉ®Ë¢´‰øÆÊîπÊó∂Ëá™Âä®Êõ¥Êñ∞ËØ•Êñá‰ª∂
set nobackup                 " ‰∏çÁîüÊàêÂ§á‰ªΩÊñá‰ª∂
set noswapfile               " ‰∏çÁîüÊàê‰∫§Êç¢Êñá‰ª∂
set wildmenu                 " Âú®ÂëΩ‰ª§Ë°å‰∏ãÊòæÁ§∫ÂåπÈÖçÁöÑÂ≠óÊÆµÂà∞Áä∂ÊÄÅÊ†èÈáåÈù¢
set list                     " ÊòæÁ§∫ÁâπÊÆäÂ≠óÁ¨¶ÔºåÂÖ∂‰∏≠Tab‰ΩøÁî®È´ò‰∫ÆÁ´ñÁ∫ø‰ª£ÊõøÔºåÂ∞æÈÉ®Á©∫ÁôΩ‰ΩøÁî®È´ò‰∫ÆÁÇπÂè∑‰ª£Êõø
set listchars=tab:\|\ ,trail:. "ËÆæÁΩÆtab/Â∞æÈÉ®Â≠óÁ¨¶Áî®‰ªÄ‰πàÂ°´ÂÖÖ
set t_Co=256                 " ËÆæÁΩÆÊñáÂ≠óÂèØ‰ª•ÊòæÁ§∫Â§öÂ∞ëÁßçÈ¢úËâ≤
set cursorline               " Á™ÅÂá∫ÊòæÁ§∫ÂΩìÂâçË°å
set history=50               " keep 50 lines of command line history
set incsearch                " ÂºÄÂêØÂÆûÊó∂ÊêúÁ¥¢ÂäüËÉΩ,Êü•ËØ¢Êó∂ÈùûÂ∏∏Êñπ‰æøÔºåÂ¶ÇË¶ÅÊü•ÊâæbookÂçïËØçÔºåÂΩìËæìÂÖ•Âà∞/bÊó∂Ôºå‰ºöËá™Âä®ÊâæÂà∞Á¨¨‰∏Ä‰∏™bÂºÄÂ§¥ÁöÑÂçïËØçÔºåÂΩìËæìÂÖ•Âà∞/boÊó∂Ôºå‰ºöËá™Âä®ÊâæÂà∞Á¨¨‰∏Ä‰∏™boÂºÄÂ§¥ÁöÑÂçïËØç
set hlsearch                 " ÂºÄÂêØÈ´ò‰∫ÆÊòæÁ§∫ÁªìÊûú
set nowrapscan               " ÊêúÁ¥¢Âà∞Êñá‰ª∂‰∏§Á´ØÊó∂‰∏çÈáçÊñ∞ÊêúÁ¥¢
set mouse=a                  " ÂêØÁî®Èº†Ê†á
set lbr                      " ‰∏çÂú®ÂçïËØç‰∏≠Èó¥Êñ≠Ë°å(linebreak)
" set nowrap                   " ËÆæÁΩÆ‰∏çËá™Âä®Êç¢Ë°å
" set tw=78                    "Ë∂ÖËøá80‰∏™Â≠óÁ¨¶Â∞±ÊäòË°å(textwrap)
" set viminfo='20,\"50         " read/write a .viminfo file, don't store more than 50 lines of registers
set display=lastline         " ‰∏çË¶ÅÊòæÁ§∫@@@@@


" set ambiwidth=double         "Â¶ÇÊûúÂÖ®ËßíÂ≠óÁ¨¶‰∏çËÉΩËØÜÂà´‰∏ÄËà¨Áî®Ëøô‰∏™(Ëá™Âä®Áî®ÂÆΩÂ≠óÁ¨¶ÊòæÁ§∫)
set fo+=mB                   "ÊâìÂºÄÊñ≠Ë°åÊ®°ÂùóÂØπ‰∫öÊ¥≤ËØ≠Ë®ÄÊîØÊåÅ
set ai!                      " autoindent ËÆæÁΩÆËá™Âä®Áº©Ëøõ
" set showmatch                " ÊòæÁ§∫Êã¨Âè∑ÈÖçÂØπÊÉÖÂÜµ
" set lsp=0                    "ËÆæÁΩÆË°åÈó¥Ë∑ù

" Tab
set tabstop=4
set cindent shiftwidth=4
set expandtab                " Â∞ÜTabËá™Âä®ËΩ¨ÂåñÊàêÁ©∫Ê†º [ÈúÄË¶ÅËæìÂÖ•ÁúüÊ≠£ÁöÑTabÈîÆÊó∂Ôºå‰ΩøÁî® Ctrl+V + Tab]
" ËØ¶ÁªÜÁöÑtabËÆæÁΩÆÔºöhttp://blog.chinaunix.net/uid-24774106-id-3396220.html
"set ts=4 sw=4 et  "‰πüÂèØ‰ª•‰∏ÄË°åÂÜôÂÆå:ts=tabstop=4 sw=shiftwidth=4 et=expandtab
set smarttab                 "Âú®Ë°åÈ¶ñÊåâTABÂ∞ÜÂä†ÂÖ•sw‰∏™Á©∫Ê†ºÔºåÂê¶ÂàôÂä†ÂÖ•ts‰∏™Á©∫Ê†º;ÊåâBackspaceÂèØ‰ª•Âà†Èô§4‰∏™Á©∫Ê†º



" }}}

" System Setting {{{
if g:isWIN
else
    " Âú® macvim ‰∏≠Ôºå‰∏çÊîØÊåÅ
    set nu!
endif
if v:version > 703
    set relativenumber " ÂºÄÂêØÁõ∏ÂØπË°åÂè∑
    set undofile                 " ÈáçÊñ∞ÊâìÂºÄÊñá‰ª∂ÂèØÊÅ¢Â§ç‰∏äÊ¨°ÂÖ≥Èó≠ÁöÑÊí§ÈîÄËÆ∞ÂΩï,ÈªòËÆ§filename.un~, only use for `vim --version` have +persistent_undo feature

    " ÊõøÊç¢ÂéüÊù•ÁöÑÊü•ÊâæÔºåÂèØ‰ª•ÂêåÊó∂ÊòæÁ§∫Â§ö‰∏™Êü•ÊâæÂÖ≥ÈîÆÂ≠ó(Easymotion)
    if !exists("g:vimrc_no_plugin")
        if filereadable(expand("$VIM/bundle/vim-easymotion/README.md"))
            map  / <Plug>(easymotion-sn)
            omap / <Plug>(easymotion-tn)
        endif
    endif
endif
" }}}

" Local Setting {{{
    if filereadable(expand("~/.local/.vimrc_local"))
        source ~/.local/.vimrc_local
    endif
" }}}

" Other {{{

" tabn/tabp ÂàáÊç¢tab
" tabnew ÂàõÂª∫Êñ∞Á™óÂè£
" :retab ÂØπÂΩìÂâçÊñáÊ°£ÈáçÊñ∞ÊõøÊç¢tab‰∏∫Á©∫Ê†º
" Áî®Ctrl+v TabÂèØ‰ª•‰∫ßÁîüÂéüÁîüÁöÑTab
" <leader>Space ÊâìÂºÄGoyoÁºñÂÜôÁéØÂ¢É
" :e $m<tab> Ëá™Âä®Êâ©Â±ïÂà∞:e $MYVIMRC ÁÑ∂ÂêéÊâìÂºÄ_vimrc
"
" Â∞ëÁî®
" ga ËΩ¨Êç¢ÂÖâÊ†á‰∏ãÁöÑÂÜÖÂÆπ‰∏∫Â§öËøõÂà∂
" :set notextmode  ÂéªÊéâ^MËøô‰∏™Á¨¶Âè∑
" :set paste  Ëøô‰∏™ÂèØ‰ª•Ëß£ÂÜ≥Âú®linux‰∏ãÈù¢Êúâ‰∫õÂ≠óÊØç‰ºöË¢´ÊâßË°å nopaste pastetoggle
" Á¢∞Âà∞‰∏çËÉΩËæìÂÖ•*Âè∑ÈîÆÔºåÂÖàÊåâCtrl+vÔºåÂÜçËæìÂÖ•ÊÉ≥Ë¶ÅËæìÂÖ•ÁöÑÁâπÊÆäÁ¨¶Âè∑
" gCtrl+g ÁªüËÆ°Â≠óÊï∞
" Ctrl+x, Ctrl+f Ë°•ÂÖ®ÂΩìÂâçË¶ÅËæìÂÖ•ÁöÑË∑ØÂæÑ
"
"
" manpageview phpfunctionname.php
" ÂèØ‰ª•‰ΩøÁî®Âø´Êç∑ÈîÆKÊü•ËØ¢
" ËØ¥ÊòéÔºåÊØîÂ¶Ç‰Ω†Âú®centosÈáåÈù¢Ë£Ö‰∫Üman-pagesÔºåÂΩì‰Ω†Áî®KÊü•ËØ¢ÁöÑÊó∂ÂÄôÔºåËá™Âä®‰ºöÂºπÂá∫man ‰Ω†ÂÖâÊ†á‰∏ãÈù¢ÁöÑËØç
" manpageview Êõø‰ª£‰∫ÜÊèí‰ª∂pydoc.vim
" Êü•ÊâæÂΩìÂâçÁöÑÂçïËØçÊÑèÊÄù,quick close: ZZ/:q
nmap <silent><leader>K :call Mydict()<CR>
"

" ===js===
" ÈúÄË¶ÅÁî®nodejs‰∏ãÁöÑÂåÖÂÆâË£ÖÂ∑•ÂÖ∑npmÂÆâË£Önpm install -g jshint
" shellÊµãËØïÔºöjshint -version
"


" Ëøô‰∏™‰∏ªË¶ÅÁî®Êù•ÂØπtxtÊñáÊ°£‰πüÂèØ‰ª•Áî®taglistÂàóË°®
au BufReadPre *.txt,*.log,*.ini setlocal ft=txt

au BufReadPre * if getfsize(expand("%")) > 10000000 | syntax off | endif

au BufRead,BufNewFile *.js set filetype=javascript syntax=jquery


" there use special tech, when you put ':ag ', will display ':Ag '
" cnoreabbrev ag Ag
cabbrev ag <c-r>=(getcmdtype()==':' && getcmdpos()==1 ? 'Ag' : 'ag')<CR>
" search the cur word by ag
command! Agg exe 'Ag -Q ' . expand('<cword>')

" Syntastic
let g:syntastic_check_on_open        = 0
let g:syntastic_enable_signs         = 1
let g:syntastic_error_symbol         = '!!'
let g:syntastic_style_error_symbol   = '!¬°'
let g:syntastic_warning_symbol       = '??'
let g:syntastic_style_warning_symbol = '?¬ø'

let c_no_curly_error = 1

let g:syntastic_c_checker          = "clang"
let g:syntastic_c_compiler_options = "-std=c11"

let g:syntastic_cpp_checker          = "clang++"
let g:syntastic_cpp_compiler_options = "-std=c++11"

let g:syntastic_mode_map = { 'mode': 'active',
                           \ 'passive_filetypes': ['elixir', 'javascript'] }





let g:iswindows=1
autocmd BufEnter * lcd %:p:h
map <F12> :call Do_CsTag()<CR>
nmap <C-@>s :cs find s <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-@>c :cs find c <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>t :cs find t <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>e :cs find e <C-R>=expand("<cword>")<CR><CR>:copen<CR>
nmap <C-@>f :cs find f <C-R>=expand("<cfile>")<CR><CR>:copen<CR>
nmap <C-@>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>:copen<CR>
nmap <C-@>d :cs find d <C-R>=expand("<cword>")<CR><CR>:copen<CR>

" Set 'comments' to format dashed lists in comments. setlocal only can use cur
" file
" Êó†ÊïàÊûú
" set comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://

" au BufWritePre /tmp/* setl undofile
" hahaha" dfsdjfksdj
" zÂàôÊ¨°

" Ctrl + h/j/k/l ÁßªÂä®ÂÖâÊ†áÂà∞‰∏ä‰∏ãÂ∑¶Âè≥‰ΩçÁΩÆ
" Ctrl + H/J/K/L ÁßªÂä®Á™óÂè£Âà∞‰∏ä‰∏ãÂ∑¶Âè≥‰ΩçÁΩÆ
" '+1~9 ‰∏äÊ¨°ÊâìÂºÄÁöÑÊñá‰ª∂
" m+1~9 mark 1~9Êñá‰ª∂ÁöÑ‰ΩçÁΩÆ
" :vert diffsplit main.c
" dp : diffput,ÊääÂ¢ûÂä†ÁöÑÈÉ®ÂàÜÊîæÂà∞Âè¶Â§ñ‰∏ÄËæπ
"
" insert schema, ctrl+w and other keys likes emacs

let g:phpcomplete_relax_static_constraint = 1
let g:phpcomplete_complete_for_unknown_classes = 1
let g:phpcomplete_search_tags_for_variables = 1
let g:phpcomplete_mappings = {
  \ 'jump_to_def': ',g',
  \ }
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Modify word boundary characters
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" remove - as a word boundary (i.e. making a keyword character)
set iskeyword+=-
" remove $ as a word boundary (i.e. making a keyword character)
set iskeyword+=$
set wrap linebreak nolist

" map j to gj and k to gk, so line navigation ignores line wrap
nnoremap j gj
nnoremap k gk
" mapping search with Ack
"nnoremap <leader>f :Ack<space>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Wild settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Disable output and VCS files
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem

" Disable image files
set wildignore+=*.psd,*.png,*.jpg,*.gif,*.jpeg

" Disable archive files
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz

" Ignore bundler and sass cache
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*

" Disable temp and backup files
set wildignore+=*.swp,*~,._*,*.un~

" Node and JS stuff
set wildignore+=*/node_modules/*,*.min.js

" WP Language files
set wildignore+=*.pot,*.po,*.mo

" Fonts and such
set wildignore+=*.eot,*.eol,*.ttf,*.otf,*.afm,*.ffil,*.fon,*.pfm,*.pfb,*.woff,*.svg,*.std,*.pro,*.xsf

" \ig                        --ÊòæÁ§∫/ÂÖ≥Èó≠ÂØπÈΩêÁ∫ø
" 0 or ^ or $                --Ë∑≥Ëá≥ Ë°åÈ¶ñ or Á¨¨‰∏Ä‰∏™ÈùûÁ©∫Â≠óÁ¨¶ or Ë°åÂ∞æ
"

"
" [ Ctrl+D                   --Ë∑≥Ëá≥ÂΩìÂâçÂÖâÊ†áÊâÄÂú®ÂèòÈáèÁöÑÈ¶ñÊ¨°ÂÆö‰πâ‰ΩçÁΩÆ [‰ªéÊñá‰ª∂Â§¥ÈÉ®ÂºÄÂßã]
" [ Ctrl+I                   --Ë∑≥Ëá≥ÂΩìÂâçÂÖâÊ†áÊâÄÂú®ÂèòÈáèÁöÑÈ¶ñÊ¨°Âá∫Áé∞‰ΩçÁΩÆ [‰ªéÊñá‰ª∂Â§¥ÈÉ®ÂºÄÂßã]
" [ D                        --ÂàóÂá∫ÂΩìÂâçÂÖâÊ†áÊâÄÂú®ÂèòÈáèÁöÑÊâÄÊúâÂÆö‰πâ‰ΩçÁΩÆ [‰ªéÊñá‰ª∂Â§¥ÈÉ®ÂºÄÂßã]
" [ I                        --ÂàóÂá∫ÂΩìÂâçÂÖâÊ†áÊâÄÂú®ÂèòÈáèÁöÑÊâÄÊúâÂá∫Áé∞‰ΩçÁΩÆ [‰ªéÊñá‰ª∂Â§¥ÈÉ®ÂºÄÂßã]
"
" ---------- ÊñáÊú¨Êìç‰Ωú ----------
"
" dw de d0 d^ d$ dd          --Âà†Èô§
" cw ce c0 c^ c$ cc          --Âà†Èô§Âπ∂ËøõÂÖ•ÊèíÂÖ•Ê®°Âºè
" yw ye y0 y^ y$ yy          --Â§çÂà∂
" vw ve v0 v^ v$ vv          --ÈÄâ‰∏≠
"
" diÂàÜÈöîÁ¨¶                   --Âà†Èô§ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπ [‰∏çÂåÖÊã¨ÂàÜÈöîÁ¨¶]
" ciÂàÜÈöîÁ¨¶                   --Âà†Èô§ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπÂπ∂ËøõÂÖ•ÊèíÂÖ•Ê®°Âºè [‰∏çÂåÖÊã¨ÂàÜÈöîÁ¨¶]
" yiÂàÜÈöîÁ¨¶                   --Â§çÂà∂ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπ [‰∏çÂåÖÊã¨ÂàÜÈöîÁ¨¶]
" viÂàÜÈöîÁ¨¶                   --ÈÄâ‰∏≠ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπ [‰∏çÂåÖÊã¨ÂàÜÈöîÁ¨¶]
"
" daÂàÜÈöîÁ¨¶                   --Âà†Èô§ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπ [ÂåÖÊã¨ÂàÜÈöîÁ¨¶]
" caÂàÜÈöîÁ¨¶                   --Âà†Èô§ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπÂπ∂ËøõÂÖ•ÊèíÂÖ•Ê®°Âºè [ÂåÖÊã¨ÂàÜÈöîÁ¨¶]
" yaÂàÜÈöîÁ¨¶                   --Â§çÂà∂ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπ [ÂåÖÊã¨ÂàÜÈöîÁ¨¶]
" vaÂàÜÈöîÁ¨¶                   --ÈÄâ‰∏≠ÊåáÂÆöÂàÜÈöîÁ¨¶‰πãÈó¥ÁöÑÂÜÖÂÆπ [ÂåÖÊã¨ÂàÜÈöîÁ¨¶]
"
" XiÂíåXaÈÉΩÂèØ‰ª•Âú®XÂêéÈù¢Âä†ÂÖ•‰∏Ä‰∏™Êï∞Â≠óÔºå‰ª•Êåá‰ª£ÊâÄÂ§ÑÁêÜÁöÑÊã¨Âè∑Â±ÇÊ¨°
" Â¶Ç d2i( ÊâßË°åÁöÑÊòØÂà†Èô§ÂΩìÂâçÂÖâÊ†áÂ§ñÂõ¥Á¨¨‰∫åÂ±ÇÊã¨Âè∑ÂÜÖÁöÑÊâÄÊúâÂÜÖÂÆπ
"
" dtÂ≠óÁ¨¶                     --Âà†Èô§Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶ [‰∏çÂåÖÊã¨ËØ•Â≠óÁ¨¶]
" ctÂ≠óÁ¨¶                     --Âà†Èô§Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶Âπ∂ËøõÂÖ•ÊèíÂÖ•Ê®°Âºè [‰∏çÂåÖÊã¨ËØ•Â≠óÁ¨¶]
" ytÂ≠óÁ¨¶                     --Â§çÂà∂Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶ [‰∏çÂåÖÊã¨ËØ•Â≠óÁ¨¶]
" vtÂ≠óÁ¨¶                     --ÈÄâ‰∏≠Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶ [‰∏çÂåÖÊã¨ËØ•Â≠óÁ¨¶]
"
" dfÂ≠óÁ¨¶                     --Âà†Èô§Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶ [ÂåÖÊã¨ËØ•Â≠óÁ¨¶]
" cfÂ≠óÁ¨¶                     --Âà†Èô§Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶Âπ∂ËøõÂÖ•ÊèíÂÖ•Ê®°Âºè [ÂåÖÊã¨ËØ•Â≠óÁ¨¶]
" yfÂ≠óÁ¨¶                     --Â§çÂà∂Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶ [ÂåÖÊã¨ËØ•Â≠óÁ¨¶]
" vfÂ≠óÁ¨¶                     --ÈÄâ‰∏≠Êú¨Ë°åÂÜÖÂÆπÔºåÁõ¥Âà∞ÈÅáÂà∞Á¨¨‰∏Ä‰∏™ÊåáÂÆöÂ≠óÁ¨¶ [ÂåÖÊã¨ËØ•Â≠óÁ¨¶]
"
" XT Âíå XF ÊòØ Xt/Xf ÁöÑÂèçÊñπÂêëÊìç‰Ωú
"
" ---------- ‰æøÊç∑Êìç‰Ωú ----------
"
" Ctrl + A                   --Â∞ÜÂΩìÂâçÂÖâÊ†áÊâÄÂú®Êï∞Â≠óËá™Â¢û1        [‰ªÖÊôÆÈÄöÊ®°ÂºèÂèØÁî®]
" Ctrl + X                   --Â∞ÜÂΩìÂâçÂÖâÊ†áÊâÄÂú®Êï∞Â≠óËá™Âáè1        [‰ªÖÊôÆÈÄöÊ®°ÂºèÂèØÁî®]
" mÂ≠óÁ¨¶       and 'Â≠óÁ¨¶      --Ê†áËÆ∞‰ΩçÁΩÆ and Ë∑≥ËΩ¨Âà∞Ê†áËÆ∞‰ΩçÁΩÆ
" qÂ≠óÁ¨¶ xxx q and @Â≠óÁ¨¶      --ÂΩïÂà∂ÂÆè   and ÊâßË°åÂÆè

" ÂØπÈÉ®ÂàÜËØ≠Ë®ÄËÆæÁΩÆÂçïÁã¨ÁöÑÁº©Ëøõ
au FileType scala,clojure,lua,ruby,eruby,dart,coffee,slim,jade,sh set shiftwidth=2
au FileType scala,clojure,lua,ruby,eruby,dart,coffee,slim,jade,sh set tabstop=2

" Ê†πÊçÆÂêéÁºÄÂêçÊåáÂÆöÊñá‰ª∂Á±ªÂûã
au BufRead,BufNewFile *.h   setlocal ft=c
au BufRead,BufNewFile *.sql setlocal ft=mysql
au BufRead,BufNewFile *.tpl setlocal ft=smarty
au BufRead,BufNewFile *.txt setlocal ft=txt

" ÈíàÂØπÈÉ®ÂàÜËØ≠Ë®ÄÂèñÊ∂àÊåáÂÆöÂ≠óÁ¨¶ÁöÑÂçïËØçÂ±ûÊÄß
au FileType clojure  set iskeyword-=.
au FileType clojure  set iskeyword-=>
au FileType perl,php set iskeyword-=$
au FileType ruby     set iskeyword+=!
au FileType ruby     set iskeyword+=?

" ÂéªÊéâBOM
" set nobomb; set fileencoding=utf8; w

" js-beautify Ê†ºÂºèÂåñÁΩëÈ°µ‰ª£Á†Å
autocmd FileType javascript noremap <buffer>  <s-f> :call JsBeautify()<cr>
autocmd FileType html noremap <buffer> <s-f> :call HtmlBeautify()<cr>
autocmd FileType css noremap <buffer> <s-f> :call CSSBeautify()<cr>
autocmd FileType javascript vnoremap <buffer>  <s-f> :call RangeJsBeautify()<cr>
autocmd FileType html vnoremap <buffer> <s-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css vnoremap <buffer> <s-f> :call RangeCSSBeautify()<cr>

" Emmet.vim
" div>p#foo$*3>a
" https://raw.githubusercontent.com/mattn/emmet-vim/master/TUTORIAL

" Enable folding with the spacebar
set foldmethod=indent        " ÈÄâÊã©‰ª£Á†ÅÊäòÂè†Á±ªÂûã, other:marker,indent,syntax
set foldlevel=99             " Á¶ÅÊ≠¢Ëá™Âä®ÊäòÂè† also same: set [no]foldenable
au BufWinLeave * silent mkview  " ‰øùÂ≠òÊñá‰ª∂ÁöÑÊäòÂè†Áä∂ÊÄÅ
au BufRead * silent loadview    " ÊÅ¢Â§çÊñá‰ª∂ÁöÑÊäòÂè†Áä∂ÊÄÅ
nnoremap <space> za             " Áî®Á©∫Ê†ºÊù•ÂàáÊç¢ÊäòÂè†Áä∂ÊÄÅ
" nnoremap ÈáåÁ¨¨‰∏Ä‰∏™ n ‰ª£Ë°® normal modeÔºåÂêéÈù¢ÁöÑ noremap ‰ª£Ë°®‰∏çË¶ÅÈáçÂ§çÊò†Â∞ÑÔºåËøôÊòØÈÅøÂÖç‰∏Ä‰∏™ÊåâÈîÆÂêåÊó∂Êò†Â∞ÑÂ§ö‰∏™Âä®‰ΩúÁî®ÁöÑ

au FileType javascript set sw=2



"vim Êèí‰ª∂Ë∞ÉËØï
"Ê£ÄÊµãÊèí‰ª∂Âä†ËΩΩÊó∂Èó¥
"vim filename --startuptime 'time.txt'
"‰∏ãÈù¢‰ª£Á†ÅÂèØ‰ª•Ê£ÄÊµãÂä†ËΩΩÊèí‰ª∂ÊÄªÁî®Êó∂
"awk '{print $2}' time.txt | sed '/[0-9].*:/d' | awk '{sum+=$1} END {print sum}'
"Ê£ÄÊµãvimÂú®Âπ≤‰ªÄ‰πà vim filename -V > savefilename
"
"

" c/c++ÁéØÂ¢ÉÂºÄÂèëIDE
" cÂºÄÂèë‰ªãÁªçÔºöhttp://blog.csdn.net/bokee/article/details/6633193
" Ctags
"inoremap  <c-]> <c-x><c-]> "ctags Ë°•ÂÖ®Âø´Êç∑ÈîÆ
" Áî®ctrl+]ÂíåCtrl+tË∑≥ËΩ¨ÂÆö‰πâÂíåËøîÂõû
nmap <silent><leader>mt :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q <cr><cr>:echo 'Generate Ctags Done'<cr>
" nmap <leader>mt <ESC>:!ctags -R --languages=
" set tags+=~/gitdb/rails/tags
" ÁîüÊàêcscope
" nmap <leader>gc :!cscope -Rbq -f cscope/cs.out <CR><CR>:echo 'generate cscope done'<cr>
" cscopeÁöÑ‰ΩøÁî®
" <leader>f
" s: Find this C symbol
" g: Find this definition
" d: Find functions called by this function
" c: Find functions calling this function
" t: Find this text string
" e: Find this egrep pattern
" f: Find this file
" i: Find files #including this file
" ‰ΩøÁî®taglist <leader>tl
" Âú®. -> :: Á≠âÂú∞ÊñπÂèØ‰ª•Ëá™Âä®Ë°•ÂÖ®

"
"
"marker ‰ΩøÁî®
" m 0~9 Ê†áËÆ∞Êñá‰ª∂
" ' 0~9 ÈöèÊó∂ÊâìÂºÄÊñá‰ª∂

" tips: ‰ªévimÊöÇÊó∂ÁöÑÂàáÊç¢Âà∞Console
" ÊöÇÂÅúvimÊñπÂºè:Ctrl+z, jobs, fg
" ‰ΩøÁî®vimÁöÑshÂëΩ‰ª§ÂêØÂä®Êñ∞console :sh
" ‰ΩøÁî®!bashÂêØÂä®‰∏Ä‰∏™console
" Áõ¥Êé•ÊâßË°å:!ÂëΩ‰ª§

" }}}
" }}}

" Shorcut {{{

" =======
" Ëá™ÂÆö‰πâÂø´Êç∑ÈîÆ
" =======


" Win paste
" imap <C-V> <C-r>+

" Êää CTRL-S Êò†Â∞Ñ‰∏∫ ‰øùÂ≠ò
" imap <C-S> <C-C>:w<CR>


" Áî®‰∏§‰∏™<CR>ÂèØ‰ª•ÈöêËóèÊâßË°åÂëΩ‰ª§ÂêéÂá∫Áé∞ÁöÑÊèêÁ§∫‰ø°ÊÅØ"
" map F :call FormatCode() <CR><CR>
" map <silent>F ‰πüÂèØ‰ª•ÈöêËóè
" F                   Ê†ºÂºèÂåñËæìÂá∫(Â∑≤ÊäõÂºÉ,js-beautify better)
" map F :%s/{/{\r/g <CR> :%s/}/}\r/g <CR>  :%s/;/;\r/g <CR> gg=G


" Ctrl + H            ÂÖâÊ†áÁßªÂΩìÂâçË°åË°åÈ¶ñ/Â∑≤ÁªèÊê¨Âà∞ÂÖºÂÆπÂå∫
" imap <c-h> <ESC>I

" Ctrl + J            ÂÖâÊ†áÁßª‰∏ã‰∏ÄË°åË°åÈ¶ñ
imap <c-j> <ESC><Down>I

" Ctrl + K            ÂÖâÊ†áÁßª‰∏ä‰∏ÄË°åË°åÂ∞æ
imap <c-k> <ESC><Up>A

" Ctrl + L            ÂÖâÊ†áÁßªÂΩìÂâçË°åË°åÂ∞æ
imap <c-l> <ESC>A

" Alt  + H            ÂÖâÊ†áÂ∑¶Áßª‰∏ÄÊ†º
imap <m-h> <Left>

" Alt  + J            ÂÖâÊ†á‰∏ãÁßª‰∏ÄÊ†º
imap <m-j> <Down>

" Alt  + K            ÂÖâÊ†á‰∏äÁßª‰∏ÄÊ†º
imap <m-k> <Up>

" Alt  + L            ÂÖâÊ†áÂè≥Áßª‰∏ÄÊ†º
imap <m-l> <Right>

" \c                  Â§çÂà∂Ëá≥ÂÖ¨ÂÖ±Ââ™Ë¥¥Êùø
vmap <leader>c "+y

" \a                  Â§çÂà∂ÊâÄÊúâËá≥ÂÖ¨ÂÖ±Ââ™Ë¥¥Êùø
nmap <leader>a <ESC>ggVG"+y<ESC>

" \v                  ‰ªéÂÖ¨ÂÖ±Ââ™Ë¥¥ÊùøÁ≤òË¥¥
imap <leader>v <ESC>"+p
nmap <leader>v "+p
vmap <leader>v "+p

" \bb                 Êåâ=Âè∑ÂØπÈΩê‰ª£Á†Å [TabularÊèí‰ª∂]
nmap <leader>bb :Tab /=<CR>

" \bn                 Ëá™ÂÆö‰πâÂØπÈΩê    [TabularÊèí‰ª∂]
nmap <leader>bn :Tab /

" \tl                 ÊâìÂºÄTaglist/TxtBrowserÁ™óÂè£ÔºåÂú®Âè≥‰æßÊ†èÊòæÁ§∫
nmap <leader>tl :Tlist<CR><c-l>

" \ff                 ÊâìÂºÄÊñá‰ª∂ÊêúÁ¥¢Á™óÂè£ÔºåÂú®Áä∂ÊÄÅÊ†èÊòæÁ§∫ [ctrlp.vimÊèí‰ª∂]
nmap <leader>ff :CtrlP<CR>

" \16                 ÂçÅÂÖ≠ËøõÂà∂Ê†ºÂºèÊü•Áúã
nmap <leader>16 <ESC>:%!xxd<ESC>

" \r16                ËøîÂõûÊôÆÈÄöÊ†ºÂºè
nmap <leader>r16 <ESC>:%!xxd -r<ESC>

" \rb                 ‰∏ÄÈîÆÂéªÈô§ÊâÄÊúâÂ∞æÈÉ®Á©∫ÁôΩ
" imap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
nmap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>
vmap <leader>rb <ESC>:let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

" \rt                 ‰∏ÄÈîÆÊõøÊç¢ÂÖ®ÈÉ®Tab‰∏∫Á©∫Ê†º
" imap <leader>rt <ESC>:call RemoveTabs()<CR>
nmap <leader>rt :call RemoveTabs()<CR>
vmap <leader>rt <ESC>:call RemoveTabs()<CR>

" \rl
nmap <leader>rl :so ~/.vimrc<CR>

" \r<cr>                 ‰∏ÄÈîÆÊõøÊç¢ÂÖ®ÈÉ®Tab‰∏∫Á©∫Ê†º
" imap <leader>rcr <ESC>:%s/\r//g<CR>
nmap <leader>r<cr> :%s/\r//g<CR>
vmap <leader>r<cr> <ESC>:%s/\r//g<CR>

" \th                 ‰∏ÄÈîÆÁîüÊàê‰∏éÂΩìÂâçÁºñËæëÊñá‰ª∂ÂêåÂêçÁöÑHTMLÊñá‰ª∂ [‰∏çËæìÂá∫Ë°åÂè∑]
" imap <leader>th <ESC>:set nonumber<CR>:set norelativenumber<CR><ESC>:TOhtml<CR><ESC>:w %:r.html<CR><ESC>:q<CR>:set number<CR>:set relativenumber<CR>
nmap <leader>th <ESC>:set nonumber<CR>:set norelativenumber<CR><ESC>:TOhtml<CR><ESC>:w %:r.html<CR><ESC>:q<CR>:set number<CR>:set relativenumber<CR>
vmap <leader>th <ESC>:set nonumber<CR>:set norelativenumber<CR><ESC>:TOhtml<CR><ESC>:w %:r.html<CR><ESC>:q<CR>:set number<CR>:set relativenumber<CR>

" move lines up or down (command - D)
nmap <m-j> mz:m+<cr>`z
nmap <m-k> mz:m-2<cr>`z
vmap <m-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <m-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Tab move lines left or right (c-Ctrl,s-Shift)
"nmap    <c-tab>     v>
"nmap    <s-tab>     v<
"vmap    <c-tab>     >gv
"vmap    <s-tab>     <gv

:nmap <c-tab> :tabn<CR>
:map <c-tab> :tabn<CR>
imap <c-tab> <Esc>:tabn<CR>i

:nmap <c-s-tab> :tabp<CR>
:map <c-s-tab> :tabp<CR>
imap <c-s-tab> <Esc>:tabp<CR>i

" ‰∏ã‰∏Ä‰∏™ÁºìÂÜ≤Âå∫
:nmap <leader>n :bn<CR>
:map <leader>n :bn<CR>
imap <leader>n <Esc>:bp<CR>i
:nmap <c-F3> :bn<CR>
:map <c-F3> :bn<CR>
imap <c-F3> <Esc>:bp<CR>i


" ‰∏ä‰∏Ä‰∏™ÁºìÂÜ≤Âå∫
:nmap <leader>p :bp<CR>
:map <leader>p :bp<CR>
imap <leader>p <Esc>:bp<CR>i
:nmap <c-F2> :bp<CR>
:map <c-F2> :bp<CR>
imap <c-F2> <Esc>:bp<CR>i

" \R         ‰∏ÄÈîÆ‰øùÂ≠ò„ÄÅÁºñËØë„ÄÅËøêË°å
imap <leader>R <ESC>:call Compile_Run_Code()<CR>
nmap <leader>R :call Compile_Run_Code()<CR>
vmap <leader>R <ESC>:call Compile_Run_Code()<CR>

" \rsl       ÊâßË°åÈÄâ‰∏≠Ë°åÂëΩ‰ª§
" run the select line in bash
vmap <leader>rsl <esc>:'<,'>:w !sh <CR>
" run the select line output result
vmap <leader>rso <esc>:'<,'>!sh <CR>
" FYI: omitting :w will replace the selection with the command's output.

" \ml        add modeline, display like this: " vim: set ts=4 sw=4 tw=78 et :
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" tabs
map <leader>tn :tabnew<cr>
map <leader>te :tabedit
" map <leader>tc :tabclose<cr>
map <leader>tm :tabmove

" Line(s) move up/down
nnoremap <silent> <C-k>  :m-2<CR>==
nnoremap <silent> <C-j>  :m+<CR>==
xnoremap <silent> <C-k>  :m'<-2<CR>gv=gv
xnoremap <silent> <C-j>  :m'>+<CR>gv=gv

" Process past
set pastetoggle=<F3>
nnoremap <F3> :set invpaste paste?<CR>
imap <F3> <C-O>:set invpaste paste?<CR>
set pastetoggle=<F3>
" no num and relative
nnoremap <leader><F3> :set relativenumber!<CR>:set nu!<CR>
imap <leader><F3>     :set relativenumber!<CR>:set nu!<CR>

" ÂàáÊç¢Á™óÂè£ÂÖâÊ†á
" switch window
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
"nnoremap <leader>w <C-W>w

nnoremap <silent> <Leader>ml :call AppendModeline()<CR>

" }}}

" Language {{{

" Python {{{
    " Base Setting {
        " python highlight
        let python_highlight_all = 1
        let b:python_version_2 = 1
        let g:python_version_2 = 1

        au BufRead *.wsgi setl filetype=python

        au BufNewFile,BufRead *.py,*.pyw
            \ set tabstop=4 |
            \ set softtabstop=4 |
            \ set shiftwidth=4 |
            \ set textwidth=79 |
            \ set expandtab |
            \ set autoindent |
            \ set fileformat=unix |

        " Use UNIX (\n) line endings.
        au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

        au BufNewFile,BufRead *.js,*.html,*.css
            \ set tabstop=2 |
            \ set softtabstop=2 |
            \ set shiftwidth=2 |

        " Display tabs at the beginning of a line in Python mode as bad.
        " au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
        " Make trailing whitespace be flagged as bad.
        " au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/


        " ÊîØÊåÅVirtualenvËôöÊãüÁéØÂ¢É

        " ‰∏äÈù¢‚ÄúËΩ¨Âà∞ÂÆö‰πâ‚ÄùÂäüËÉΩÁöÑ‰∏Ä‰∏™ÈóÆÈ¢òÔºåÂ∞±ÊòØÈªòËÆ§ÊÉÖÂÜµ‰∏ãVim‰∏çÁü•ÈÅìvirtualenvËôöÊãüÁéØÂ¢ÉÁöÑÊÉÖÂÜµÔºåÊâÄ‰ª•‰Ω†ÂøÖÈ°ªÂú®ÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰∏ãÈù¢ÁöÑ‰ª£Á†ÅÔºå‰ΩøÂæóVimÂíåYouCompleteMeËÉΩÂ§üÂèëÁé∞‰Ω†ÁöÑËôöÊãüÁéØÂ¢ÉÔºö

        " python with virtualenv support
        " py << EOF
        " import os
        " import sys
        " if 'VIRTUAL_ENV' in os.environ:
        "   project_base_dir = os.environ['VIRTUAL_ENV']
        "   activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
        "   execfile(activate_this, dict(__file__=activate_this))
        " EOF
        " ËøôÊÆµ‰ª£Á†Å‰ºöÂà§Êñ≠‰Ω†ÁõÆÂâçÊòØÂê¶Âú®ËôöÊãüÁéØÂ¢É‰∏≠ÁºñËæëÔºåÁÑ∂ÂêéÂàáÊç¢Âà∞Áõ∏Â∫îÁöÑËôöÊãüÁéØÂ¢ÉÔºåÂπ∂ËÆæÁΩÆÂ•Ω‰Ω†ÁöÑÁ≥ªÁªüË∑ØÂæÑÔºåÁ°Æ‰øùYouCompleteMeËÉΩÂ§üÊâæÂà∞Áõ∏Â∫îÁöÑsite packagesÊñá‰ª∂Â§π„ÄÇ
        " ‰∏äÈù¢ÁöÑ‰ª£Á†Å‰ºº‰πéÂ∑≤ÁªèË¢´‰∏ãÈù¢ÁöÑÊèí‰ª∂Êô∫ËÉΩËß£ ÂÜ≥
        " https://github.com/jmcantrell/vim-virtualenv
        " Â¶ÇÊûúÊúâ‰∏ÄÂ§©‰∏ÄÁõ¥‰ΩøÁî® python  ÂèØ‰ª•ËÄÉËôëÊää python ÊîæÂú®ÂçïÁã¨ÁöÑ‰∏Ä‰∏™Êñá‰ª∂ÈÖçÁΩÆ‰∏≠, ÂèÇËÄÉËøôÁØáÊñáÁ´†
        " https://segmentfault.com/a/1190000003962806
    " }
" }}}

" PHP {{{
    " Base Setting {
        "Âè™ÊúâÂú®ÊòØPHPÊñá‰ª∂Êó∂ÔºåÊâçÂêØÁî®PHPË°•ÂÖ®
        function! AddPHPFuncList()
            set dictionary+=$HOME/.vim/vimfiles/resource/php-offical.dict
            set complete-=k complete+=k
        endfunction

        " Map <leader>el to error_log value
        " takes the whatever is under the cursor and wraps it in error_log( and
        " print_r( with parameter true and a label
        au FileType php nnoremap <leader>el ^vg_daerror_log( '<esc>pa=' . print_r( <esc>pa, true ) );<cr><esc>

        au FileType php call AddPHPFuncList()
        au FileType php setlocal omnifunc=syntaxcomplete#Complete
        au BufNewFile,BufRead *.phtml set filetype=php

        " set tags+= ~/.vim/vimfiles/resource/tags-php

        " autocmd FileType php setlocal omnifunc=phpcomplete#CompleteTags
        " Èô§‰∫Ü‰ΩøÁî®TabËøô‰∏™Ë°•ÂÖ®ÁöÑÊñπÂºèÔºåËøòÂèØ‰ª•‰ΩøÁî®Ctrl+xÔºåCtrl+oÊù•Ë°•ÂÖ®‰∏äÈù¢Êñá‰ª∂ÁöÑÂÜÖÁΩÆÂáΩÊï∞

        " function! RunPhpcs()
            " let l:filename=@%
            " let l:phpcs_output=system('phpcs --report=csv --standard=YMC '.l:filename)
            " let l:phpcs_list=split(l:phpcs_output, "\n")
            " unlet l:phpcs_list[0]
            " cexpr l:phpcs_list
            " cwindow
            " endfunction

            " set errorformat+=\"%f\"\\,%l\\,%c\\,%t%*[a-zA-Z]\\,\"%m\"
        " command! Phpcs execute RunPhpcs()
        " php debug
        let g:vdebug_keymap = {
        \    "run"               : "<F5>",
        \    "set_breakpoint"    : "<F9>",
        \    "run_to_cursor"     : "<F1>",
        \    "get_context"       : "<F2>",
        \    "detach"            : "<F7>",
        \    "step_over"         : "<F10>",
        \    "step_into"         : "<F11>",
        \    "step_out"          : '<leader><F11>',
        \    "close"             : '<leader><F5>',
        \    "eval_under_cursor" : "<Leader>ec",
        \    "eval_visual"       : "<Leader>ev",
        \}
        let g:vdebug_options = {
        \    "port"               : 9000,
        \    "server"             : 'localhost',
        \    "timeout"            : 20,
        \    "on_close"           : 'detach',
        \    "break_on_open"      : 0,
        \    "path_maps"          : {},
        \    "debug_window_level" : 0,
        \    "debug_file_level"   : 0,
        \    "debug_file"         : "",
        \    "watch_window_style" : 'expanded',
        \    "marker_default"     : '*',
        \    "marker_closed_tree" : '+',
        \    "marker_open_tree"   : '-'
        \}

        " Ë¶ÅËÆ©vimÊîØÊåÅphp/jsÁöÑÈîôËØØÊü•ËØ¢ÔºåÂÖàÂÆâË£ÖsyntasticÊèí‰ª∂
        " ÁÑ∂ÂêéÁî®phpÂØπÂ∫îÁöÑÁâàÊú¨pear install PHP_CodeSniffer-2.0.0a2
        " shellÊµãËØïÔºöphpcs index.php
        " phpcsÔºåtab 4‰∏™Á©∫Ê†ºÔºåÁºñÁ†ÅÂèÇËÄÉ‰ΩøÁî®CodeIgniterÈ£éÊ†º
        " let g:syntastic_phpcs_conf = "--tab-width=3 --standard=Zend"
        " let g:syntastic_phpcs_conf = "--tab-width=4 --standard=CodeIgniter"
        " ‰πüÂèØ‰ª•Âú®cli‰∏≠ÊâßË°å‰∏ãÈù¢ÁöÑÂëΩ‰ª§
        " phpcs --config-set default_standard Zend
        " Â¶ÇÊûúÊÄïË¢´phpcsÊèêÁ§∫ÁöÑÈîôËØØÂêìÂÄíÔºåÂèØ‰ª•ÊääZendÊîπÊàênone,ËøôÊ†∑Â∞±Âè™‰ºöÊèêÁ§∫‰∏Ä‰∫õÂ∏∏ËßÅÁöÑÈîôËØØ
        "
        let g:phpqa_messdetector_ruleset = ''
        let g:phpqa_messdetector_cmd = '/usr/bin/phpmd'
        " Âú®ÊâìÂºÄÊñá‰ª∂ÁöÑÊó∂ÂÄôÊ£ÄÊü•
        let g:phpqa_messdetector_autorun = 0
    " }
" }}}

" Node {{{
let g:used_javascript_libs = 'underscore,jquery,react'

" }}}

" }}}

" Plugins {{{

" =======
" Plugins
" =======

" NERDTree
let NERDTreeQuitOnOpen = 1
let NERDChristmasTree=1
let g:NERDTreeWinSize = 18
" autocmd VimEnter * NERDTree " auto start nerdtree
" autocmd vimenter * if !argc() | NERDTree | endif " if not file start too
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif " when no file colse nerdtree
let NERDTreeIgnore = ['\.pyc$','\.sock$', '\~$', '\#.*#$'] "‰∏çÊòæÁ§∫ÁöÑÊñá‰ª∂
map <leader>fl :NERDTreeToggle<CR>
" ‰∏çÊòæÁ§∫È°πÁõÆÊ†ë‰∏äÈ¢ùÂ§ñÁöÑ‰ø°ÊÅØÔºå‰æãÂ¶ÇÂ∏ÆÂä©„ÄÅÊèêÁ§∫
let NERDTreeMinimalUI=1


" tComment - inherit the NERD_commenter shortkey
map <leader>ci <Plug>TComment_<Leader>__
map <leader>cm <Plug>TComment_<Leader>_b
" NERD_commenter      Ê≥®ÈáäÂ§ÑÁêÜÊèí‰ª∂
" let loaded_nerd_tree = 1
" let NERDSpaceDelims = 1                        " Ëá™Âä®Ê∑ªÂä†ÂâçÁΩÆÁ©∫Ê†º


" RUBY
" auto completed
let g:rubycomplete_buffer_loading = 1
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
autocmd FileType ruby compiler ruby


" vim-markdown
" ËÆæÁΩÆmdÊñá‰ª∂ÊòØÂê¶Áî®Ëá™Â∑±ÁöÑÊñπÂºèÊäòÂè†
let g:vim_markdown_folding_disabled = 1




"set zen coding
 let g:user_zen_settings = {
  \  'php' : {
  \    'extends' : 'html',
  \    'filters' : 'c',
  \  },
  \  'xml' : {
  \    'extends' : 'html',
  \  },
  \  'haml' : {
  \    'extends' : 'html',
  \  },
  \  'erb' : {
  \    'extends' : 'html',
  \  },
  \}


"scss,sass
au BufRead,BufNewFile *.scss set filetype=scss
au BufRead,BufNewFile *.sass set filetype=scss

"coffee script
au BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
au BufNewFile,BufReadPost *.coffee setl shiftwidth=2 expandtab
hi link coffeeSpaceError NONE
hi link coffeeSemicolonError NONE
hi link coffeeReservedError NONE
map <leader>cf :CoffeeCompile watch vert<cr>

"let skim use slim syntax
au BufRead,BufNewFile *.skim set filetype=slim


" Enable omni completion.Ëøò‰∏çÁ°ÆÂÆöËøô‰∏™Êúâ‰ªÄ‰πàÁî®
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType ruby setlocal omnifunc=rubycomplete#Complete
" autocmd FileType php setlocal omnifunc=phpcomplete#CompletePHP

" neocomplcache setting
" Enable heavy omni completion.
" if !exists('g:neocomplcache_omni_patterns')
"   let g:neocomplcache_omni_patterns = {}
" endif
" let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\w*\|\h\w*::'

" minitest
" set completefunc=syntaxcomplete#Complete


"auto completed
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0





" ÈÖçÁΩÆÈ´ò‰∫ÆÊã¨Âè∑ kien/rainbow_parentheses.vim
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['black',       'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]
let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0

"Ëá™ÂÆö‰πâÂÖ≥ËÅîÊñá‰ª∂Á±ªÂûã
au BufNewFile,BufRead *.less set filetype=css

" Indent_guides       ÊòæÁ§∫ÂØπÈΩêÁ∫ø
let g:indent_guides_enable_on_vim_startup = 1  " ÈªòËÆ§ÂÖ≥Èó≠
let g:indent_guides_guide_size            = 1  " ÊåáÂÆöÂØπÈΩêÁ∫øÁöÑÂ∞∫ÂØ∏
" Âõ†‰∏∫goËá™Âä®‰ºöÊ∑ªÂä†tab, ‰ΩøÁî®<leader>ig‰πüÂèØ‰ª•ÂàáÊç¢
let g:indent_guides_exclude_filetypes = ['help', 'nerdtree', 'go']


":Tlist               Ë∞ÉÁî®TagList
let Tlist_Show_One_File        = 1             " Âè™ÊòæÁ§∫ÂΩìÂâçÊñá‰ª∂ÁöÑtags
let Tlist_Exit_OnlyWindow      = 1             " Â¶ÇÊûúTaglistÁ™óÂè£ÊòØÊúÄÂêé‰∏Ä‰∏™Á™óÂè£ÂàôÈÄÄÂá∫Vim
let Tlist_Use_Right_Window     = 1             " Âú®Âè≥‰æßÁ™óÂè£‰∏≠ÊòæÁ§∫
let Tlist_File_Fold_Auto_Close = 1             " Ëá™Âä®ÊäòÂè†

" }}}

" Plugin {{{
    " CtrlP {{{
        let g:ctrlp_map = '<c-p>'
        let g:ctrlp_cmd = 'CtrlP'
        let g:ctrlp_working_path_mode = 'ra'
        set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.jpg,*.png,*.gif,*.jpeg,.DS_Store  " MacOSX/Linux
        " nnoremap <Leader>t :CtrlP getcwd()<CR>
        " nnoremap <Leader>f :CtrlPClearAllCaches<CR>
        " nnoremap <Leader>bl :CtrlPBuffer<CR>
        " nnoremap <Leader>j :CtrlP ~/<CR>
        nnoremap <c-s-p> :CtrlPBuffer<CR>
        " ‰∏ãÈù¢ËøôÂè•ËØùÊòØËØ¥ctrlpËá™Âä®ÈªòËÆ§ÂèñÊ∂àÊé¢Á¥¢ÊâÄÊúâtmpÁõÆÂΩï‰∏ãÁöÑÊñá‰ª∂,ÊâÄ‰ª•‰ºöÂØºËá¥Âú®tmpÁõÆÂΩï‰∏≠
        " ‰∏çËÉΩ‰ΩøÁî®ctrlp,ÂÖ∂ÂÆûÊàëÂèëÁé∞Âú®Èöè‰æø‰∏ÄÁßçtmpÁõÆÂΩï‰∏ãÈù¢,‰ΩøÁî®vimÁöÑ :e path/to/filename
        " ÈÉΩÊ≤°Êúâ‰ΩúÁî®,ÂÖ∑‰ΩìÂéüÂõ†ÂèØËÉΩÂíåctrlpÁ±ª‰ºº
        " default gtrlp_custom_ignore =  '\v[\/]\.(git|hg|svn)$',
        if exists('g:ctrlp_custom_ignore')
            unlet g:ctrlp_custom_ignore
        endif
        let g:ctrlp_custom_ignore = {
                    \'dir': '\.git$\|\.hg$\|\.svn$\|bower_components$\|dist$\|node_modules$\|project_files$\|test$',
                    \'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$\|\.pyo$\|\.rbc$\|\.rbo$\|\.class$\|\.o$\|\~$'
                    \}

        " command! -nargs=* -complete=function Call exec 'call '.<f-args>
        " command! Q q
        " command! -bang Q q<bang>
        " command! Qall qall
        " command! -bang Qall qall<bang>
        " command! W w
        " command! -nargs=1 -complete=file E e <args>
        " command! -bang -nargs=1 -complete=file E e<bang> <args>
        " command! -nargs=1 -complete=tag Tag tag <args>
        "
        " Save a file that requires sudoing even when
        " you opened it as a normal user.
        command! Sw w !sudo tee % > /dev/null
        " Show difference between modified buffer and original file
        command! DiffSaved call s:DiffWithSaved()

        command! Bw call CleanClose(1,0)
        command! Bq call CleanClose(0,0)
        command! -bang Bw call CleanClose(1,1)
        command! -bang Bq call CleanClose(0,1)
    " }}}
    " YCM {{{
        "competeble with UltraSnips
        let g:ycm_key_list_select_completion   = []
        let g:ycm_key_list_previous_completion = []
        let g:ycm_global_ycm_extra_conf        = $VIM . '/rc/ycm_extra_conf.py'
        " ‰∏ãÈáåÁöÑfiletype‰∏ªË¶ÅÊòØÂíå‰∏äÈù¢ÁöÑsyntasticÂØπÂ∫îÔºåÁî®‰∫é‰ΩøÁî®clangÁºñËØëÁöÑÊÉÖÂÜµ
        let g:ycm_extra_conf_vim_data          = ['&filetype', 'g:syntastic_c_compiler_options', 'g:syntastic_cpp_compiler_options']
        let g:ycm_filetype_blacklist = {
            \ 'notes' : 1,
            \ 'markdown' : 1,
            \ 'text' : 1,
            \ 'gitcommit': 1,
            \ 'mail': 1,
        \}
        let g:ycm_error_symbol   = '>>'
        let g:ycm_warning_symbol = '>!'
        let g:ycm_collect_identifiers_from_tags_files = 1
        let g:ycm_collect_identifiers_from_comments_and_strings = 1
        " Á°Æ‰øù‰∫ÜÂú®‰Ω†ÂÆåÊàêÊìç‰Ωú‰πãÂêéÔºåËá™Âä®Ë°•ÂÖ®Á™óÂè£‰∏ç‰ºöÊ∂àÂ§±
        let g:ycm_autoclose_preview_window_after_completion=1
        " offer like ctags: declara, define and multi, only support c/cpp
        " nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
        " nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
        nnoremap <leader>gd :YcmCompleter GoToDefinitionElseDeclaration<CR>

    " }}}
    " Airline {{{
        " ÊâìÂºÄairlineÁöÑÊâ©Â±ïtab buffer exploerÂäüËÉΩ
        " let g:airline#extensions#tabline#enabled = 1
        " determine whether bufferline will overwrite customization variables
        " let g:airline#extensions#bufferline#overwrite_variables = 1
        " AirLineÂΩ©Ëâ≤Áä∂ÊÄÅÊ†è:badwolf, bubblegum, luna, raven, serene
        " sereneÈúÄË¶Å‰øÆÊîπÁöÑÂú∞ÊñπÔºö
        " ÁôΩËâ≤Áä∂ÊÄÅÊ†è: sol
        " ~/.dotfiles/vimrc/vimfiles/bundle/vim-airline/autoload/airline/themes +4
        " Êîπ‰∏∫235
        " let g:airline_theme = 'serene'                " ËÆæÁΩÆ‰∏ªÈ¢ò
        " configure the title text for quickfix buffers
        " let g:airline#extensions#quickfix#quickfix_text = 'Quickfix'

        " Open URI under cursor or search.--go brower
        nmap gb <Plug>(openbrowser-smart-search)
        " Open URI selected word or search.
        vmap gb <Plug>(openbrowser-smart-search)
        " Open URI you also can use <leader>gb because of "textbrowser.vim"
    " }}}
    " Goyo:the pure writer {{{
        function! s:goyo_before()
          silent !tmux set status off
          set noshowmode
          set noshowcmd
        endfunction
        function! s:goyo_after()
          silent !tmux set status on
          set showmode
          set showcmd
        endfunction
        let g:goyo_callbacks = [function('s:goyo_before'), function('s:goyo_after')]
        nmap <Leader><Space> :Goyo<CR>
    " }}}
" }}}

" Locals {{{
if ($ENV == 'windows')
elseif ($ENV == 'macmini')
    set background=light
    colorscheme solarized

endif
" }}}

" vim: set ts=4 sw=4 tw=0 et fdm=marker foldlevel=0 foldenable foldlevelstart=99 :
