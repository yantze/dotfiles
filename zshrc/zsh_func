#functions

#fname 递归查找当前目录下指定文件
function fname() { find . -iname "*$@*"; }

#创建文件夹并且cd进去, 可以顺带把后面的文件放入文件夹中
function take() {
    files=${@:2}
    mkdir -p $1
    if [ -n "$files" ]; then
        mv ${@:2} $1;
    fi
    cd $1;
}

# 设置当前的环境变量 " test -s ~/.env && export ..."
[ -s ~/.env ] && export MYENV=`cat ~/.env`
function myenv() { [[ -n $argv ]] && echo $argv > ~/.env && export MYENV=$argv || echo $MYENV }

# cd and ls
if [[ `uname` = "Darwin" ]];  then # mac
    export GENERAL_EXECUTE_PATH='/bin'
    function cl() { [[ "" = "$argv[-1]" ]] && builtin cd ~ || builtin cd "$argv[-1]" && ls "${(@)argv[1,-2]}" }
elif [[ `uname` = "Linux" ]]; then # linux
    export GENERAL_EXECUTE_PATH='/usr/bin'
    # origin: function cl() { builtin cd "$argv[-1]" && ls --group-directories-first --color=auto "${(@)argv[1,-2]}" }
    function cl() { [[ "" = "$argv[-1]" ]] && builtin cd ~ || builtin cd "$argv[-1]" && ls --group-directories-first --color=auto "${(@)argv[1,-2]}" }
fi

function psgrep() { ps aux | grep -v grep | grep "$@" -i --color=auto }



# get pure ip from url
function ipurl() {
    echo $1 | 
    sed -e 's/^.*:\/\/\(.*\)/\1/g' |          # remove http(s)://
    awk -F/ '{print $1}' |                    # remove /query/abc?a=b
    xargs ping -c 1 -t 1 |                    # -c only send one package, -t timeout 1s
    sed -n '1p' |                             # result: get first line
    sed -e 's/^.*(\([0-9\.]\{7,\}\)).*/\1/g'  # get ip in the first line
}

# put things to trash
function put() {
    TRASH=`echo ~/trash`
    if [[ ! -d $TRASH ]]; then
        mkdir "$TRASH"
    fi

    # delete trash
    if [[ $TRASH == `echo $1` ]]; then
        $GENERAL_EXECUTE_PATH/rm -rf $TRASH
        exit
    fi

    # delete exist files
    for single in "$@"; do
        if [[ -e "$TRASH/$single" ]]; then
            echo "Delete... $TRASH/$single"
            $GENERAL_EXECUTE_PATH/rm -r "$TRASH/$single"
        fi
    done

    mv $* ~/trash
}

# copy by pipe without newline symboy
function scopy() {
    read line
    echo -n $line | tr -d '\n' | clipcopy
}

