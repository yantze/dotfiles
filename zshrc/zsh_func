#functions

#fname 递归查找当前目录下指定文件
function fname() { find . -iname "*$@*"; }

# 设置当前的环境变量 " test -s ~/.env && export ..."
[ -s ~/.env ] && for v in `cat ~/.env`
do
    export $v
done

function myenv() {
    [[ -n $argv ]] && sed -i -e "s/MYENV=$MYENV/MYENV=$argv/" ~/.env && export MYENV=$argv || echo $MYENV
}

function psgrep() {
    ps aux | grep -v grep | grep "$@" -i --color=auto
}


# cd and ls
if [[ `uname` = "Darwin" ]];  then # mac
    export GENERAL_EXECUTE_PATH='/bin'
    function cdlist() {
        [[ "" = "${argv[-1]}" ]] && builtin cd ~ || builtin cd "${argv[-1]}" && ls "${(@)argv[1,-2]}"
    }
elif [[ `uname` = "Linux" ]]; then # linux
    export GENERAL_EXECUTE_PATH='/usr/bin'
    # origin: function cl() { builtin cd "$argv[-1]" && ls --group-directories-first --color=auto "${(@)argv[1,-2]}" }
    function cdlist() {
        argv=$@
        [[ "" = "${argv[-1]}" ]] && builtin cd ~ || builtin cd "${argv[-1]}" && ls --group-directories-first --color=auto "${(@)argv[1,-2]}"
    }
fi



# simple git clone
function dl()
{
    git_url=$1
    local_dir=$2
    if [[ -z $1 ]]; then
        # echo "fatal: You must specify a repository to clone."
        builtin cd ~/dl
        return
    fi
    if [[ -z $2 ]]; then
        local_dir=${git_url#*\.com\/*\/}
    fi

    builtin cd ~/dl
    git clone $git_url $local_dir
    cd $local_dir
    pwdc
}

function pwdc() {
    pathfile="`pwd`/$1"
    echo $pathfile | scopy
    echo $pathfile
}


# 创建文件夹并且cd进去, 可以顺带把后面的文件放入文件夹中
function take() {
    mkdir -p $1
    for file in ${@:2}; do
        mv $file $1
    done
    # files=${@:2}
    # mv $files $1; # 这里会把 $files 当作一个整体,导致问题
    cd $1;
}


# get pure ip from url
function ipurl() {
    echo $1 | 
    sed -e 's/^.*:\/\/\(.*\)/\1/g' |          # remove http(s)://
    awk -F/ '{print $1}' |                    # remove /query/abc?a=b
    xargs ping -c 1 -t 1 |                    # -c only send one package, -t timeout 1s
    sed -n '1p' |                             # result: get first line
    sed -e 's/^.*(\([0-9\.]\{7,\}\)).*/\1/g'  # get ip in the first line
}

# put things to trash
function put() {
    TRASH=$(echo ~/.trashcli)

    if [[ ! -d $TRASH ]]; then
        mkdir "$TRASH"
    fi

    # empty trash
    if [[ $TRASH == $(echo $1) ]]; then
        echo "Delete $TRASH"
        "$GENERAL_EXECUTE_PATH/rm" -rf "$TRASH"
        return 0
    fi

    # delete exist files
    for single in "$@"; do
        RM_PATH=${PWD}/${single}
        # RM_DIR=$(dirname ${RM_PATH})
        RM_BASENAME=$(basename "$single")

        if [[ -e "$TRASH/$RM_BASENAME" ]]; then
            echo "Delete... $TRASH/$single"
            "$GENERAL_EXECUTE_PATH/rm" -rf "$TRASH/$single"
        fi

        mv "$RM_PATH" "$TRASH"
        echo "Move... $RM_PATH"
        echo "To... $TRASH"
        echo ""
    done
    # mv $* $TRASH
}

hash extract 2>/dev/null || extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar -Jxvf $1   ;;
          *.tar.Z)     tar zxvf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7za x $1        ;;
          *.cab)       cabextract $1  ;;
          *.arj)       unarj $1       ;;
          *.lzh)       lha e $1       ;;
          *)           echo "don't know how to extract '$1'…" ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# copy by pipe first line without newline symboy
function scopy() {
    read line
    echo -n $line | tr -d '\n' | clipcopy
}

# add url to safari reading list
function toread() {
    osascript -e "tell application \"Safari\" to add reading list item \"$1\""
}

function gitweb() {
    git remote -v | awk '{print $2}' | head -n 1
}

# ag result to vim in current path
function agk() {
    [[ -n $1 ]] && vim +Ack\ $1\ $(pwd)
}
