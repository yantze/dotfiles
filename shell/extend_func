# fname 递归查找当前目录下指定文件
function fname() { find . -iname "*$@*"; }

function psgrep() {
    ps aux | grep -v grep | grep "$@" -i --color=auto
}


# cd and ls
if [[ `uname` = "Darwin" ]];  then # mac
    export GENERAL_EXECUTE_PATH='/bin'
    function cdlist() {
        [[ "" = "${argv[-1]}" ]] && builtin cd ~ || builtin cd "${argv[-1]}" && command ls "${(@)argv[1,-2]}"
    }
elif [[ `uname` = "Linux" ]]; then # linux
    export GENERAL_EXECUTE_PATH='/usr/bin'
    # origin: function cl() { builtin cd "$argv[-1]" && ls --group-directories-first --color=auto "${(@)argv[1,-2]}" }
    function cdlist() {
        argv=$@
        [[ "" = "${argv[-1]}" ]] && builtin cd ~ || builtin cd "${argv[-1]}" && ls --group-directories-first --color=auto "${(@)argv[1,-2]}"
    }
fi



# simple git clone
function dl()
{
    git_url=$1
    local_dir=$2
    if [[ -z $1 ]]; then
        # echo "fatal: You must specify a repository to clone."
        builtin cd ~/dl
        return
    fi
    if [[ -z $2 ]]; then
        local_dir=${git_url#*\.com\/*\/}
    fi

    builtin cd ~/dl
    git clone $git_url $local_dir
    cd $local_dir
    pwdc
}

function pwdc() {
    pathfile="`pwd`/$1"
    echo -n $pathfile | scopy
    # echo -n $pathfile | xcopy
    echo $pathfile
}


# 创建文件夹并且cd进去, 可以顺带把后面的文件放入文件夹中
function take() {
    mkdir -p $1
    for file in ${@:2}; do
        mv $file $1
    done
    # files=${@:2}
    # mv $files $1; # 这里会把 $files 当作一个整体,导致问题
    cd $1;
}


# get pure ip from url
function ipurl() {
    echo $1 |
    sed -e 's/^.*:\/\/\(.*\)/\1/g' |          # remove http(s)://
    awk -F/ '{print $1}' |                    # remove /query/abc?a=b
    xargs ping -c 1 -t 1 |                    # -c only send one package, -t timeout 1s
    sed -n '1p' |                             # result: get first line
    sed -e 's/^.*(\([0-9\.]\{7,\}\)).*/\1/g'  # get ip in the first line
}

# put things to trash
function put() {
    TRASH=$(echo ~/.trashcli)

    if [[ ! -d $TRASH ]]; then
        mkdir "$TRASH"
    fi

    # empty trash
    if [[ $TRASH == $(echo $1) ]]; then
        echo "$GENERAL_EXECUTE_PATH/rm" -rf "$TRASH"
        "$GENERAL_EXECUTE_PATH/rm" -rf "$TRASH"
        return 0
    fi

    # delete exist files
    for single in "$@"; do
        if [[ $single =~ "^/.*" ]]; then
            RM_PATH=${single}
        else
            RM_PATH=${PWD}/${single}
        fi

        # RM_DIR=$(dirname ${RM_PATH})
        RM_BASENAME=$(basename "$single")

        # 删除已经存在的文件目录
        # if [[ -e "$TRASH/$RM_BASENAME" ]]; then
        #     echo "Delete... $TRASH/$single"
        #     "$GENERAL_EXECUTE_PATH/rm" -rf "$TRASH/$single"
        # fi

        TRASH_TMP="$TRASH/$(date +'%m%d-%H%M%S')"
        if [[ ! -d $TRASH_TMP ]]; then
            mkdir $TRASH_TMP
        fi

        mv "$RM_PATH" "$TRASH_TMP"
        [ $? -eq 0 ] || return
        echo "Move  ... $RM_PATH"
        echo "To    ... $TRASH_TMP"
        echo ""
    done
    # mv $* $TRASH
}

hash extract 2>/dev/null || extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.tar.xz)    tar -Jxvf $1   ;;
          *.tar.Z)     tar zxvf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       unrar x $1     ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7za x $1        ;;
          *.cab)       cabextract $1  ;;
          *.arj)       unarj $1       ;;
          *.lzh)       lha e $1       ;;
          *)           echo "don't know how to extract '$1'…" ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# add url to safari reading list
function toread() {
    osascript -e "tell application \"Safari\" to add reading list item \"$1\""
}

function gitweb() {
    git remote -v | awk '{print $2}' | head -n 1
}

# ag result to vim in current path
function agk() {
    [[ -n $1 ]] && vim +Ack\ $1\ $(pwd)
}

# start a web server by php
function phphttp() {
    if [ -z $* ]; then
        php -S 127.0.0.1:3000
    else
        php -S 127.0.0.1:$*
    fi
}

proxyon () {
    # HOST_PROXY=127.0.0.1
    # HTPT_PROXY=6152 # HTTP PORT
    # HSPT_PROXY=6152 # HTTPS PORT
    # SSPT_PROXY=6153 # SOCKS PORT

    export http_proxy=http://$PROXY_HOST:$PROXY_PORT
    export https_proxy=http://$PROXY_HOST:$PROXY_PORT
    # export all_proxy=socks5://$PROXY_HOST:$PROXY_SOCKS_PORT
    export no_proxy="127.0.0.1, localhost, *.domain.com, 192.168.1.10, domain.com:8080"

    export HTTP_PROXY=http://$PROXY_HOST:$PROXY_PORT
    export HTTPS_PROXY=http://$PROXY_HOST:$PROXY_PORT
    export NO_PROXY="127.0.0.1, localhost, *.domain.com, 192.168.1.10, domain.com:8080"
    echo "Proxy on"
}

proxyoff () {
    unset http_proxy
    unset https_proxy
    unset all_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset ALL_PROXY
    echo "Proxy off"
}

function proxy_sys_on() {
    NETWORK="Wi-Fi"
    echo networksetup -setwebproxy $NETWORK $HOST_PROXY $HTPT_PROXY
    echo networksetup -setsecurewebproxy $NETWORK $HOST_PROXY $HSPT_PROXY
    echo networksetup -setsocksfirewallproxy $NETWORK $HOST_PROXY $SSPT_PROXY
}

function proxy_sys_off() {
    NETWORK="Wi-Fi"
    echo networksetup -setsocksfirewallproxystate $NETWORK off
    echo networksetup -setwebproxystate $NETWORK off
    echo networksetup -setsecurewebproxystate $NETWORK off
}



# copy by pipe first line without newline symboy
function scopy() {
    read line
    echo -n $line | tr -d '\n' | xcopy
}

function notify() {
    # https://apple.stackexchange.com/questions/57412/how-can-i-trigger-a-notification-center-notification-from-an-applescript-or-shel
    # https://code-maven.com/display-notification-from-the-mac-command-line
    osascript -e "display notification \"$2\" with title \"$1\" subtitle \"$3\""
}

# 类似 rg 的命令，不找二进制文件
function rrg() {
    # 这里可以使用正则，类似 egrep 语法，也可以查找多个字符串，例如 httpd\|vsftpd
    search_string="$1"
    # 如果没有第二个参数，就在当前文件夹查找
    search_path=`[[ $2 == "" ]] && echo "." || echo "$2"`
    grep -RIi --byte-offset --exclude-dir={dist,.bzr,CVS,.git,.hg,.svn,.node_modules} -E $search_string $search_path $3 $4
    # -R 递归查找，相比 -r 可以查找软链
    # -I 忽略二进制文件
    # -i 忽略大小写
    # -b, --byte-offset 显示文件中的字符偏移量
    # -E 支持扩展正则, (supporting `?`, `+`, `{}`, `()` and `|`)
}

function miniprompt() {
  PS1="$ "
}

# https://github.com/junegunn/dotfiles/blob/master/bashrc
# 有一个 preserved 也是 repeat，可以执行 repeat 3 ls, 但很弱
function repeatCount() {
  local _
  for _ in $(seq $1); do
    eval "$2"
  done
}
# v - open recent files from ~/.viminfo
function viminfo() {
  local files
  files=$(grep '^>' ~/.viminfo | cut -c3- |
          while read line; do
            [ -f "${line/\~/$HOME}" ] && echo "$line"
          done | fzf -d -m -q "$*" -1) && vim ${files//\~/$HOME}
}
# https://stackoverflow.com/a/18787544/755334
function rpmx() {
  # brew install rpm2cpio
  rpm2cpio.pl "$1" | cpio -idmv
}


# c - browse chrome history
c() {
  local cols sep
  export cols=$(( COLUMNS / 3 ))
  export sep='{::}'

  cp -f ~/Library/Application\ Support/Google/Chrome/Default/History /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select title, url from urls order by last_visit_time desc" |
  ruby -ne '
    cols = ENV["cols"].to_i
    title, url = $_.split(ENV["sep"])
    len = 0
    puts "\x1b[36m" + title.each_char.take_while { |e|
      if len < cols
        len += e =~ /\p{Han}|\p{Katakana}|\p{Hiragana}|\p{Hangul}/ ? 2 : 1
      end
    }.join + " " * (2 + cols - len) + "\x1b[m" + url' |
  fzf --ansi --multi --no-hscroll --tiebreak=index |
  sed 's#.*\(https*://\)#\1#' | xargs open
}

# Kills a process running on a specified tcp port
killport() {
  for port in "$@"
  do
    lsof -i tcp:$port | awk 'NR!=1 {print $2}' | xargs kill -9
  done
}
